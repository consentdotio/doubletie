---
description: ts-docs / js-docs
globs: *.tsx, *.ts
alwaysApply: false
---
Analyze and refactor my TypeScript codebase with these strict guidelines:

1. Maximize type inference while maintaining strict type safety
2. Replace all generic type parameters with descriptive names that reflect their purpose:
   - Change T → EntityType, K → KeyType, V → ValueType, etc.
   - Use semantic naming that communicates the parameter's role

3. Apply these DRY principles:
   - Extract common type patterns into reusable utility types
   - Leverage conditional types to avoid repetition
   - Use mapped types where appropriate to transform existing types
   - Implement template literal types to generate string unions

4. Enforce strict typing standards:
   - Eliminate ALL usage of 'any' type
   - Replace 'any' with appropriate 'unknown' types when necessary
   - Use 'never' for exhaustive checks
   - Add proper index signatures when dealing with dynamic properties

5. Add comprehensive TSDoc comments that include:
   - Function/interface purpose
   - Type parameter explanations
   - Parameter documentation
   - Return type documentation
   - Edge case handling
   - @internal tag for internal-only components
   - @throws tag to document potential errors and exceptions
   - @see tags to reference related functions/types
   - @example tags with practical usage scenarios
   - @deprecated tag for deprecated features with migration paths

6. Document error handling:
   - Add @throws tags for all functions that might throw errors
   - Specify exact error types or custom error classes
   - Document conditions that trigger each error
   - Provide guidance on how to handle/prevent errors

For example, transform:

function fetchData<T>(url: string, options?: object): Promise<T> {
  return fetch(url, options).then(res => res.json());
}

Into:

/**
 * Fetches and parses JSON data from a remote endpoint
 * 
 * @typeParam ResponseType - The expected type of the parsed response
 * 
 * @param url - The URL to fetch data from
 * @param options - Optional fetch configuration options
 * @returns Promise resolving to the parsed response data
 * 
 * @throws {TypeError} When the response is not valid JSON
 * @throws {Error} When the network request fails
 * 
 * @example
 * ```ts
 * // Fetching a typed user response
 * interface User { id: number; name: string }
 * const user = await fetchData<User>('/api/users/1');
 * ```
 */
function fetchData<ResponseType>(
  url: string, 
  options?: RequestInit
): Promise<ResponseType> {
  return fetch(url, options)
    .then(response => {
      if (!response.ok) {
        throw new Error(`HTTP error ${response.status}: ${response.statusText}`);
      }
      return response.json() as Promise<ResponseType>;
    });
}

Provide the refactored code with strict typing and clear documentation.